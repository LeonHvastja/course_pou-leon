[
["mrv.html", "Chapter 8 Multivariate random variables 8.1 Multivariate normal random variables", " Chapter 8 Multivariate random variables This chapter deals with multivariate random variables. The students are expected to acquire the following knowledge: Theoretical Multivariate normal distribution. R Sampling from the multivariate normal distribution. 8.1 Multivariate normal random variables Exercise 8.1 (Cholesky decomposition) Let \\(X\\) be a random vector of length \\(k\\) with \\(X_i \\sim \\text{N}(0, 1)\\) and \\(LL^*\\) the Cholesky decomposition of a Hermitian positive-definite matrix \\(A\\). Let \\(\\mu\\) be a vector of length \\(k\\). Find the distribution of the random vector \\(Y = \\mu + L X\\). Find the Cholesky decomposition of \\(A = \\begin{bmatrix} 2 &amp; 1.2 \\\\ 1.2 &amp; 1 \\end{bmatrix}\\). R: Use the results from a) and b) to sample from the MVN distribution \\(\\text{N}(\\mu, A)\\), where \\(\\mu = [1.5, -1]^T\\). Plot a scatterplot and compare it to direct samples from the multivariate normal distribution (rmvnorm). R: \\(L\\) is a linear map$. Plot 10 points from \\(X\\) and 10 points from the transformation \\(L X\\) (Hint: use color or shapes). Compare and discuss the results. Solution. \\(X\\) has an independent normal distribution of dimension \\(k\\). Then \\[\\begin{align} Y = \\mu + L X &amp;\\sim \\text{N}(\\mu, LL^T) \\\\ &amp;\\sim \\text{N}(\\mu, A). \\end{align}\\] \\[\\begin{align} \\begin{bmatrix} a &amp; 0 \\\\ b &amp; c \\end{bmatrix} \\begin{bmatrix} a &amp; b \\\\ 0 &amp; c \\end{bmatrix} = \\begin{bmatrix} 2 &amp; 1.2 \\\\ 1.2 &amp; 1 \\end{bmatrix} \\end{align}\\] # a set.seed(1) nsamps &lt;- 1000 X &lt;- matrix(data = rnorm(nsamps * 2), ncol = 2) mu &lt;- c(1.5, -1) L &lt;- matrix(data = c(sqrt(2), 0, 1.2 / sqrt(2), sqrt(1 - 1.2^2/2)), ncol = 2, byrow = TRUE) Y &lt;- t(mu + L %*% t(X)) plot_df &lt;- data.frame(rbind(X, Y), c(rep(&quot;X&quot;, nsamps), rep(&quot;Y&quot;, nsamps))) colnames(plot_df) &lt;- c(&quot;D1&quot;, &quot;D2&quot;, &quot;var&quot;) ggplot(data = plot_df, aes(x = D1, y = D2, colour = as.factor(var))) + geom_point() # b nsamps &lt;- 10 X &lt;- matrix(data = rnorm(nsamps * 2), ncol = 2) L &lt;- matrix(data = c(sqrt(2), 0, 1.2 / sqrt(2), sqrt(1 - 1.2^2/2)), ncol = 2, byrow = TRUE) Y &lt;- t(L %*% t(X)) plot_df &lt;- data.frame(rbind(X, Y), c(rep(&quot;X&quot;, nsamps), rep(&quot;Y&quot;, nsamps)), c(1:nsamps, 1:nsamps)) colnames(plot_df) &lt;- c(&quot;D1&quot;, &quot;D2&quot;, &quot;var&quot;, &quot;samp&quot;) ggplot(data = plot_df, aes(x = D1, y = D2, color = as.factor(var), shape = as.factor(samp))) + geom_point() + scale_shape_manual(values=1:10) Exercise 8.2 (Eigendecomposition) R: Let \\(\\Sigma = U \\Lambda U^T\\) be the eigendecomposition of covariance matrix \\(\\sigma\\). Follow the procdeure below, to sample from a multivariate normal with \\(\\mu = [-2, 1]^T\\) and \\(\\Sigma = \\begin{bmatrix} 0.3, -0.5 \\\\ -0.5, 1.6 \\end{bmatrix}\\): Sample from two independent standardized normal distributions to get \\(X\\). Find the eigen decomposition of \\(X\\) (eigen). Multiply \\(X\\) by \\(\\Lambda^{\\frac{1}{2}}\\) to get \\(X2\\). Consider how the eigendecomposition for \\(X2\\) changes compared to \\(X\\). Multiply \\(X2\\) by \\(U\\) to get \\(X3\\). Consider how the eigendecomposition for \\(X3\\) changes compared to \\(X2\\). Add \\(\\mu\\) to \\(X3\\). Consider how the eigendecomposition for \\(X4\\) changes compared to \\(X3\\). Plot the data and the eigenvectors (scaled with \\(\\Lambda^{\\frac{1}{2}}\\)) at each step. Hint: Use geom_segment for the eigenvectors. # a set.seed(1) sigma &lt;- matrix(data = c(0.3, -0.5, -0.5, 1.6), nrow = 2, byrow = TRUE) ed &lt;- eigen(sigma) e_val &lt;- ed$values e_vec &lt;- ed$vectors # b set.seed(1) nsamps &lt;- 1000 X &lt;- matrix(data = rnorm(nsamps * 2), ncol = 2) vec1 &lt;- matrix(c(1,0,0,1), nrow = 2) X2 &lt;- t(sqrt(diag(e_val)) %*% t(X)) vec2 &lt;- sqrt(diag(e_val)) %*% vec1 X3 &lt;- t(e_vec %*% t(X2)) vec3 &lt;- e_vec %*% vec2 X4 &lt;- t(c(-2, 1) + t(X3)) vec4 &lt;- c(-2, 1) + vec3 vec_mat &lt;- data.frame(matrix(c(0,0,0,0,0,0,0,0,0,0,0,0,-2,1,-2,1), ncol = 2, byrow = TRUE), t(cbind(vec1, vec2, vec3, vec4)), c(1,1,2,2,3,3,4,4)) df &lt;- data.frame(rbind(X, X2, X3, X4), c(rep(1, nsamps), rep(2, nsamps), rep(3, nsamps), rep(4, nsamps))) colnames(df) &lt;- c(&quot;D1&quot;, &quot;D2&quot;, &quot;wh&quot;) colnames(vec_mat) &lt;- c(&quot;D1&quot;, &quot;D2&quot;, &quot;E1&quot;, &quot;E2&quot;, &quot;wh&quot;) ggplot(data = df, aes(x = D1, y = D2)) + geom_point() + geom_segment(data = vec_mat, aes(xend = E1, yend = E2), color = &quot;red&quot;) + facet_wrap(~ wh) + coord_fixed() Exercise 8.3 (Marginal and conditional distributions) Let \\(X \\sim \\text{N}(\\mu, \\Sigma)\\), where $= [2, 0, -1]^T and \\(\\Sigma = \\begin{bmatrix} 1 &amp; -0.2 &amp; 0.5 \\\\ -0.2 &amp; 1.4 &amp; 0 \\\\ 0.5 &amp; 0 &amp; 2 \\\\ \\end{bmatrix}\\). R: For the calculation in the following points, you can use R. Find the distribution of \\(\\Sigma_A\\). Find the distribution of \\(\\Sigma_A | Sigma_B\\). Find the distribution of. Find the distribution of. Find the distribution of. R: Visually compare the distributions of a) and b), and c), d) and e) at different conditional values. mu &lt;- c(2, 0, -1) Sigma &lt;- matrix(c(1, -0.2, 0.5, -0.2, 1.4, -1.2, 0.5, -1.2, 2), nrow = 3, byrow = TRUE) mu_A &lt;- c(2, 0) mu_B &lt;- -1 Sigma_A &lt;- Sigma[1:2, 1:2] Sigma_B &lt;- Sigma[3, 3] Sigma_AB &lt;- Sigma[1:2, 3] # b tmp_b &lt;- Sigma_AB * (1 / Sigma_B) mu_b &lt;- mu_A - tmp_b * mu_B Sigma_b &lt;- Sigma_B - t(Sigma_AB) %*% solve(Sigma_A) %*% Sigma_AB tmp_b ## [1] 0.25 -0.60 mu_b ## [1] 2.25 -0.60 Sigma_b ## [,1] ## [1,] 0.8602941 # d Sigma_d &lt;- Sigma_A - (Sigma_AB * (1 / Sigma_B)) %*% t(Sigma_AB) Sigma_d ## [,1] [,2] ## [1,] 0.875 0.10 ## [2,] 0.100 0.68 Sigma_d ## [,1] [,2] ## [1,] 0.875 0.10 ## [2,] 0.100 0.68 Solution. \\(\\mu_A = [2, 0, -1]^T\\) and \\(\\Sigma_A = \\begin{bmatrix} 1 &amp; -0.2 &amp; \\\\ -0.2 &amp; 1.4 \\\\ \\end{bmatrix}\\). \\[\\begin{align} X_A | X_B &amp;= b \\sim \\text{N}(\\mu_t, \\Sigma_t), \\\\ \\mu_t &amp;= [2.25, -0.6]^T + [2.25, -0.6]^T b, \\\\ \\Sigma_t &amp;= \\begin{bmatrix} 0.875 &amp; 0.1 \\\\ 0.1 &amp; 0.68 \\\\ \\end{bmatrix} \\end{align}\\] "]
]
